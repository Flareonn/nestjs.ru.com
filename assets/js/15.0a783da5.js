(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{407:function(t,e,n){"use strict";n.r(e);var r=n(54),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"пользовательские-проваидеры"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#пользовательские-проваидеры"}},[t._v("#")]),t._v(" Пользовательские провайдеры")]),t._v(" "),n("p",[t._v("В предыдущих главах мы коснулись различных аспектов "),n("strong",[t._v("инъекции зависимостей (DI)")]),t._v(" и того, как она используется в Nest.\nОдним из примеров является инъекция зависимостей на "),n("RouterLink",{attrs:{to:"/guide/providers.html#внедрение-зависимостеи-dependency-injection"}},[t._v("основе конструктора")]),t._v(",\nиспользуемая для инъекции экземпляров (часто providers) в классы. Вы не удивитесь, узнав, что Dependency Injection встроен\nв ядро Nest фундаментальным образом. До сих пор мы рассмотрели только один основной паттерн. По мере усложнения вашего\nприложения вам может понадобиться использовать все возможности системы DI, поэтому давайте изучим их более подробно.")],1)])}),[],!1,null,null,null);e.default=s.exports}}]);